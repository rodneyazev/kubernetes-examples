# Persistent Volume para PostgreSQL
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
---
# Persistent Volume Claim para PostgreSQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Secret para credenciais do PostgreSQL
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
type: Opaque
data:
  postgres-password: cG9zdGdyZXNwYXNzd29yZA== # postgrespassword
  keycloak-password: a2V5Y2xvYWtwYXNzd29yZA== # keycloakpassword
---
# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: keycloak
            - name: POSTGRES_USER
              value: keycloak
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: postgres-password
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc
---
# PostgreSQL Service (Interno)
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
# Keycloak Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: quay.io/keycloak/keycloak:23.0.1
          args: ["start-dev"]
          ports:
            - containerPort: 8080
          env:
            - name: KC_DB
              value: "postgres"
            - name: KC_DB_URL
              value: "jdbc:postgresql://postgres:5432/keycloak"
            - name: KC_DB_USERNAME
              value: "keycloak"
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: postgres-password
            - name: KEYCLOAK_ADMIN
              value: "admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: keycloak-password
            - name: KC_HOSTNAME_STRICT
              value: "false"
            - name: KC_PROXY
              value: "edge"
---
# Keycloak Service (NodePort para acesso externo)
apiVersion: v1
kind: Service
metadata:
  name: keycloak
spec:
  type: NodePort
  selector:
    app: keycloak
  ports:
    - port: 8080
      targetPort: 8080
      nodePort: 30080
---
# Alternativa: Keycloak Service (LoadBalancer para acesso externo mais fácil no Docker Desktop)
apiVersion: v1
kind: Service
metadata:
  name: keycloak-lb
spec:
  type: LoadBalancer
  selector:
    app: keycloak
  ports:
    - port: 8080
      targetPort: 8080
---
# Deployment do pgAdmin
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pgadmin
spec:
  selector:
    matchLabels:
      app: pgadmin
  template:
    metadata:
      labels:
        app: pgadmin
    spec:
      containers:
      - name: pgadmin
        image: dpage/pgadmin4
        env:
        - name: PGADMIN_DEFAULT_EMAIL
          value: "admin@admin.com"
        - name: PGADMIN_DEFAULT_PASSWORD
          value: "admin"
        ports:
        - containerPort: 80
---
# Serviço NodePort para pgAdmin (acesso via navegador)
apiVersion: v1
kind: Service
metadata:
  name: pgadmin
spec:
  type: NodePort
  selector:
    app: pgadmin
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30000